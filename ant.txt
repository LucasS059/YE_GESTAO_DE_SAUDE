import React, { useRef, useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  TouchableOpacity,
  Image,
  Dimensions,
  ScrollView,
  StatusBar,
  SafeAreaView,
  Alert,
  Animated,
  PanResponder,
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { FontAwesome5 } from '@expo/vector-icons';
import { signOut } from 'firebase/auth';
import { auth, firestore } from '../../services/firebaseConnection';
import { doc, getDoc, setDoc } from 'firebase/firestore';

const { width, height } = Dimensions.get('window');

const InputRow = ({
  iconName,
  label,
  value,
  placeholder,
  onChangeText,
  editable
}) => {
  return (
    <View style={styles.inputRow}>
      <View style={styles.iconContainer}>
        <FontAwesome5 name={iconName} size={width * 0.05} color="#739489" />
      </View>
      <Text style={styles.inputLabel}>{label}</Text>
      <TextInput
        style={[styles.inputField, !editable && styles.disabledInput]}
        placeholder={placeholder}
        placeholderTextColor="#aaa"
        value={value}
        onChangeText={onChangeText}
        editable={editable}
      />
    </View>
  );
};

export default function TelaPrincipal() {
  const navigation = useNavigation();

  // Campos básicos do usuário
  const [userName, setUserName] = useState('');
  const [state, setState] = useState('');
  const [city, setCity] = useState('');

  // Dados que podem ser editados
  const [userPressure, setUserPressure] = useState('');
  const [userGlucose, setUserGlucose] = useState('');
  const [userWeight, setUserWeight] = useState('');
  const [userHeight, setUserHeight] = useState('');

  const [userData, setUserData] = useState({});
  const [imc, setIMC] = useState('');
  const [lastAfericao, setLastAfericao] = useState('');
  const [lastEditTime, setLastEditTime] = useState('');

  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    fetchUserData();
  }, []);

  async function fetchUserData() {
    try {
      const user = auth.currentUser;
      if (user) {
        const docRef = doc(firestore, 'users', user.uid);
        const userDoc = await getDoc(docRef);
        if (userDoc.exists()) {
          const data = userDoc.data();

          // Preenche nome, cidade, estado
          setUserName(data.fullName || '');
          setCity(data.city || '');
          setState(data.state || '');
          setUserData(data);

          // Verifica aferição do dia atual
          const currentDate = new Date().toLocaleDateString();
          const todayAfericao = data.afericoes && data.afericoes[currentDate];
          if (todayAfericao) {
            setUserPressure(todayAfericao.pressure || '');
            setUserGlucose(todayAfericao.glucose || '');
            setUserWeight(todayAfericao.weight || '');
            setUserHeight(todayAfericao.height || '');
            setIMC(todayAfericao.imc || '');
            setLastAfericao(currentDate);
          } else {
            console.log('Aferição do dia não encontrada.');
          }
        } else {
          console.log('Documento do usuário não encontrado!');
        }
      }
    } catch (error) {
      console.error('Erro ao buscar dados do usuário: ', error);
    }
  }

  // Função para calcular IMC
  function calculateIMC(weight, heightCm) {
    const weightNum = parseFloat(weight);
    const heightNum = parseFloat(heightCm);
    if (!isNaN(weightNum) && !isNaN(heightNum) && heightNum > 0) {
      const heightM = heightNum / 100;
      return weightNum / (heightM * heightM);
    }
    return 0;
  }

  // Salva dados no Firestore
  async function saveUserData() {
    try {
      const user = auth.currentUser;
      if (user) {
        const currentDate = new Date().toLocaleDateString();

        // Calcula novo IMC
        const newIMC = calculateIMC(userWeight, userHeight);
        const imcFixed = newIMC.toFixed(2);
        setIMC(imcFixed);

        // Monta aferição do dia
        const newAfericao = {
          pressure: userPressure,
          glucose: userGlucose,
          weight: userWeight,
          height: userHeight,
          imc: imcFixed,
          date: currentDate
        };

        // Atualiza aferições
        let updatedAfericoes = { ...userData.afericoes };
        if (!updatedAfericoes) updatedAfericoes = {};
        updatedAfericoes[currentDate] = { ...newAfericao };

        // Cria objeto final para salvar
        const updatedUserData = { ...userData, afericoes: updatedAfericoes };

        // Salva no Firestore
        await setDoc(doc(firestore, 'users', user.uid), updatedUserData);

        console.log('Aferição salva com sucesso!');
        setLastAfericao(currentDate);

        // Salva data/hora de edição
        const now = new Date();
        const formattedTime = now.toLocaleString('pt-BR', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });
        setLastEditTime(formattedTime);

        setIsEditing(false);

        // Exibe alerta de IMC
        showIMCAlert(newIMC);
      } else {
        console.log('Usuário não logado!');
      }
    } catch (error) {
      console.error('Erro ao salvar dados: ', error);
    }
  }

  function showIMCAlert(newIMC) {
    const bmi = parseFloat(newIMC);
    let status = '';
    if (bmi < 18.5) status = 'Magro ou baixo peso';
    else if (bmi >= 18.5 && bmi < 25) status = 'Normal';
    else if (bmi >= 25 && bmi < 30) status = 'Sobrepeso';
    else if (bmi >= 30 && bmi < 35) status = 'Obesidade I';
    else if (bmi >= 35 && bmi < 40) status = 'Obesidade II';
    else status = 'Obesidade grave';

    Alert.alert('IMC', `Seu IMC: ${bmi.toFixed(2)} - ${status}`);
  }

  async function logout() {
    try {
      await signOut(auth);
      navigation.navigate('BemVindo');
    } catch (error) {
      console.log('Erro no logout:', error);
    }
  }

  const collapsedHeight = 100;
  const expandedHeight = 200;
  const animatedHeight = useRef(new Animated.Value(collapsedHeight)).current;
  const [isExpanded, setIsExpanded] = useState(false);

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: (evt, gestureState) =>
        Math.abs(gestureState.dy) > Math.abs(gestureState.dx),
      onPanResponderMove: (evt, gestureState) => {
        let newHeight = collapsedHeight - gestureState.dy;
        if (newHeight < collapsedHeight) newHeight = collapsedHeight;
        if (newHeight > expandedHeight) newHeight = expandedHeight;
        animatedHeight.setValue(newHeight);
      },
      onPanResponderRelease: (evt, gestureState) => {
        if (gestureState.dy < -20) {
          Animated.timing(animatedHeight, {
            toValue: expandedHeight,
            duration: 200,
            useNativeDriver: false,
          }).start(() => setIsExpanded(true));
        } else {
          Animated.timing(animatedHeight, {
            toValue: collapsedHeight,
            duration: 200,
            useNativeDriver: false,
          }).start(() => setIsExpanded(false));
        }
      },
    })
  ).current;

  const secondRowOpacity = animatedHeight.interpolate({
    inputRange: [collapsedHeight, expandedHeight],
    outputRange: [0, 1],
    extrapolate: 'clamp',
  });

  return (
    <>
      {/* Força barra de status clara (texto branco) no Android */}
      <StatusBar barStyle="light-content" backgroundColor="#739489" />
      {/* SafeAreaView para iOS */}
      <SafeAreaView style={{ flex: 0, backgroundColor: '#739489' }} />
      <SafeAreaView style={{ flex: 1, backgroundColor: '#739489' }}>
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.container}
        >
          {/* Cabeçalho com imagem e local */}
          <View style={styles.headerContainer}>
            <View style={styles.userInfo}>
              <Image
                source={require('../../assets/usuario.png')}
                style={styles.userImage}
                resizeMode="cover"
              />
              <View style={styles.userTextContainer}>
                <Text style={styles.userName}>{userName}</Text>
                <Text style={styles.userLocation}>
                  {city}, {state}
                </Text>
              </View>
            </View>
          </View>
          {/* Conteúdo principal em formato de “sheet” */}
          <ScrollView
            style={styles.sheetContainer}
            contentContainerStyle={styles.sheetContent}
            showsVerticalScrollIndicator={false}
          >
            <Text style={styles.sheetTitle}>Suas Informações</Text>
            {/* Linhas de Input */}
            <InputRow
              iconName="heartbeat"
              label="Pressão"
              value={userPressure}
              placeholder="Ex: 120/80"
              onChangeText={setUserPressure}
              editable={isEditing}
            />
            <InputRow
              iconName="tint"
              label="Glicose"
              value={userGlucose}
              placeholder="Ex: 90"
              onChangeText={setUserGlucose}
              editable={isEditing}
            />
            <InputRow
              iconName="weight"
              label="Peso (kg)"
              value={userWeight}
              placeholder="Ex: 70"
              onChangeText={(text) => setUserWeight(text.replace(/[^\d.]/g, ''))}
              editable={isEditing}
            />
            <InputRow
              iconName="arrows-alt-v"
              label="Altura (cm)"
              value={userHeight}
              placeholder="Ex: 175"
              onChangeText={(text) => setUserHeight(text.replace(/[^\d.]/g, ''))}
              editable={isEditing}
            />
            {/* IMC (apenas leitura) */}
            <View style={styles.inputRow}>
              <View style={styles.iconContainer}>
                <FontAwesome5 name="balance-scale" size={width * 0.05} color="#739489" />
              </View>
              <Text style={styles.inputLabel}>IMC</Text>
              <TextInput
                style={[styles.inputField, styles.disabledInput]}
                value={imc}
                editable={false}
              />
            </View>
            {/* Última aferição + última edição */}
            <View style={styles.inputRow}>
              <View style={styles.iconContainer}>
                <FontAwesome5 name="clock" size={width * 0.05} color="#739489" />
              </View>
              <Text style={styles.inputLabel}>Última Aferição:</Text>
              <Text style={styles.infoText}>{lastAfericao}</Text>
            </View>
            {lastEditTime !== '' && (
              <View style={styles.inputRow}>
                <View style={styles.iconContainer}>
                  <FontAwesome5 name="edit" size={width * 0.05} color="#739489" />
                </View>
                <Text style={styles.inputLabel}>Última edição:</Text>
                <Text style={styles.infoText}>{lastEditTime}</Text>
              </View>
            )}
            {/* Botões */}
            <View style={styles.buttonContainer}>
              <TouchableOpacity
                style={[styles.button, styles.historyButton]}
                onPress={() => navigation.navigate('Historicoafericao')}
              >
                <FontAwesome5 name="history" size={width * 0.05} color="#FFF" />
                <Text style={styles.buttonText2}>Histórico</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.button,
                  styles.editButton,
                  isEditing && styles.editingActive,
                ]}
                onPress={isEditing ? saveUserData : () => setIsEditing(true)}
              >
                <Text
                  style={[
                    styles.buttonText,
                    {
                      fontSize: width * 0.045,
                      color: isEditing ? '#FFF' : '#739489',
                    },
                  ]}
                >
                  {isEditing ? 'Salvar' : 'Editar'}
                </Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </KeyboardAvoidingView>
        <Animated.View
          style={[styles.footer, { height: animatedHeight }]}
          {...panResponder.panHandlers}
        >
          <View style={styles.handleContainer}>
            <View style={styles.handle} />
          </View>
          <View style={styles.row}>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate('Exames')}
            >
              <FontAwesome5 name="file" size={24} color="#739489" />
              <Text style={styles.navButtonText}>Exames</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate('TelaPrincipal')}
            >
              <FontAwesome5 name="home" size={24} color="#739489" />
              <Text style={styles.navButtonText}>Início</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate('Consulta')}
            >
              <FontAwesome5 name="calendar" size={24} color="#739489" />
              <Text style={styles.navButtonText}>Consultas</Text>
            </TouchableOpacity>
          </View>
          <Animated.View style={[styles.row, { opacity: secondRowOpacity }]}>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate('Medicacao')}
            >
              <FontAwesome5 name="medkit" size={24} color="#739489" />
              <Text style={styles.navButtonText}>Medicação</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate('Perfil')}
            >
              <FontAwesome5 name="user" size={24} color="#739489" />
              <Text style={styles.navButtonText}>Perfil</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.navButton}
              onPress={() => navigation.navigate(logout())}
            >
              <FontAwesome5 name="sign-out-alt" size={24} color="red" />
              <Text style={styles.navButtonText}>Sair</Text>
            </TouchableOpacity>
          </Animated.View>
        </Animated.View>
      </SafeAreaView>
    </>
  );
}

const styles = StyleSheet.create({

  footer: {
    width: '100%',
    position: 'absolute',
    bottom: 0,
    backgroundColor: '#fff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingHorizontal: 15,
    paddingTop: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    elevation: 5,
  },
  handleContainer: {
    alignItems: 'center',
    paddingVertical: 5,
    marginBottom: 10,
  },
  handle: {
    width: 40,
    height: 5,
    borderRadius: 2.5,
    backgroundColor: '#ccc',
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingBottom: 20,

    marginVertical: 5,
  },
  navButton: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  navButtonText: {
    color: '#739489',
    fontSize: 12,
    marginTop: 4,
    textAlign: 'center',
  },
  container: {
    flex: 1,
    backgroundColor: '#739489',
  },
  headerContainer: {
    backgroundColor: '#739489',
    paddingHorizontal: width * 0.05,
    paddingTop: height * 0.06,
    paddingBottom: height * 0.06,
  },
  userInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  userImage: {
    width: width * 0.18,
    height: width * 0.18,
    borderRadius: (width * 0.18) / 2,
    backgroundColor: '#ccc',
  },
  userTextContainer: {
    marginLeft: width * 0.04,
    flexShrink: 1,
  },
  userName: {
    fontSize: width * 0.05,
    fontWeight: 'bold',
    color: '#FFF',
  },
  userLocation: {
    fontSize: width * 0.035,
    color: '#EEE',
    marginTop: 3,
  },
  sheetContainer: {
    flex: 1,
    backgroundColor: '#FFF',
    marginTop: -20,
    borderTopLeftRadius: 25,
    borderTopRightRadius: 25,
  },
  sheetContent: {
    paddingHorizontal: width * 0.05,
    paddingTop: height * 0.03,
    paddingBottom: height * 0.04,
  },
  sheetTitle: {
    fontSize: width * 0.045,
    fontWeight: 'bold',
    color: '#739489',
    marginBottom: height * 0.025,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: height * 0.02,
  },
  iconContainer: {
    width: width * 0.08,
    alignItems: 'center',
    marginRight: width * 0.02,
  },
  inputLabel: {
    fontSize: width * 0.04,
    color: '#333',
    minWidth: width * 0.23,
  },
  inputField: {
    flex: 1,
    fontSize: width * 0.04,
    color: '#333',
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 6,
    paddingHorizontal: width * 0.03,
    paddingVertical: width * 0.01,
  },
  disabledInput: {
    backgroundColor: '#f0f0f0',
    color: '#999',
  },
  infoText: {
    flex: 1,
    fontSize: width * 0.04,
    color: '#333',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: height * 0.02,
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 8,
    paddingVertical: height * 0.02,
    paddingHorizontal: width * 0.05,
    marginHorizontal: width * 0.02,
  },
  historyButton: {
    backgroundColor: '#739489',
  },
  editButton: {
    backgroundColor: '#FFF',
    borderColor: '#739489',
    borderWidth: 1,
  },
  editingActive: {
    backgroundColor: '#739489',
  },
  buttonText: {
    fontWeight: 'bold',
  },
  buttonText2: {
    fontWeight: 'bold',
    marginLeft: width * 0.02,
    color: '#FFF',
  },
  logoutButton: {
    backgroundColor: '#d9534f',
    marginTop: height * 0.02,
  },
});

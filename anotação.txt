não mexer, isso é o codigo que eu fiz que deu certo 

import React, { useState } from "react";
import {
    View,
    Text,
    StyleSheet,
    TextInput,
    Button,
  } from "react-native";

import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from "firebase/auth";
import { auth } from "../../services/firebaseConnection";

export function Home() {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    async function createUser() {
        await createUserWithEmailAndPassword(auth, email, password)
        .then(value => {
            console.log('Cadastrado com sucesso! \n ' + value.user.uid);
        })
        .catch(error => console.log(error));
    };

    async function login() {
        await signInWithEmailAndPassword(auth, email, password)
        .then(value => {
            console.log('Fez login com sucesso! \n ' + value.user.uid);
        })
        .catch(error => console.log(error));
    };

    async function logout() {
        await signOut(auth)
        .then(() => {
            console.log('Saiu com sucesso!');
        })
        .catch(error => console.log(error));
    };

    return(
    <View style={styles.container}>
        <Text>Firebase App</Text>
        <TextInput
            placeholder="email"
            placeholderTextColor= "#313131"
            value={email}
            onChangeText={value => setEmail(value)}
            style={styles.input}
        />

        <TextInput
            placeholder="senha"
            placeholderTextColor= "#313131"
            value={password}
            onChangeText={value => setPassword(value)}
            style={[styles.input, {marginBottom: 10}]}
        />
        <Button
            title="CADASTRAR"
            onPress={() => createUser()}
        />

        <Button
            title="Entrar"
            onPress={() => login()}
        />

        <Button
            title="Sair"
            onPress={() => logout()}
        />
        </View>
    )
}

const styles = StyleSheet.create({
    container:{
        flex: 1,
        justifyContent: "center",
        alignItems: "center"
    },
    input:{
        borderBottomWidth: 1,
        borderBottomColor: '#313131',
        marginTop: 5,
        width: '80%',
        height: 50,
    }
})


==================

import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
    apiKey: "AIzaSyAkEqRy21DwOLW7NZZAIWVNVYbwSm8oyOs",
    authDomain: "ye-gestao-de-saude-79630.firebaseapp.com",
    projectId: "ye-gestao-de-saude-79630",
    storageBucket: "ye-gestao-de-saude-79630.appspot.com",
    messagingSenderId: "732529427575",
    appId: "1:732529427575:web:d5604168888069cf897272",
    measurementId: "G-CBSQK5D5MR"
  };

  const app = initializeApp(firebaseConfig);
  export const auth = getAuth(app);


  -----------------------

  import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Image, TextInput, TouchableOpacity, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { getAuth, sendPasswordResetEmail } from "firebase/auth";
import { auth, firestore } from "../../services/firebaseConnection";
import { doc, getDoc, updateDoc } from "firebase/firestore";
import Icon from 'react-native-vector-icons/FontAwesome';

export default function Perfil() {
  const navigation = useNavigation();
  const [isEditing, setIsEditing] = useState(false);
  const [userName, setUserName] = useState('');
  const [birthDate, setBirthDate] = useState('');
  const [email, setEmail] = useState('');
  const [profilePic, setProfilePic] = useState(null);
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('');
  const [gender, setGender] = useState('');

  useEffect(() => {
    const fetchUserProfile = async () => {
      try {
        const user = auth.currentUser;
        if (user) {
          const userDoc = await getDoc(doc(firestore, "users", user.uid));
          if (userDoc.exists()) {
            const userData = userDoc.data();
            setUserName(userData.fullName);
            setBirthDate(userData.birthDate);
            setEmail(userData.email);
            setProfilePic(userData.profilePic);
            setPhone(userData.phone);
            setAddress(userData.address);
            setGender(userData.gender);
          } else {
            console.log("No such document!");
          }
        }
      } catch (error) {
        console.error("Error fetching user data: ", error);
      }
    };

    fetchUserProfile();
  }, []);

  const handleResetPassword = async () => {
    sendPasswordResetEmail(auth, email)
      .then(() => {
        console.log("Email para redefinir a senha enviado!");
      })
      .catch((error) => {
        console.error("Erro ao enviar email para redefinir a senha: ", error);
      });
  };

  const handleSaveChanges = async () => {
    try {
      const user = auth.currentUser;
      if (user) {
        await updateDoc(doc(firestore, "users", user.uid), {
          fullName: userName,
          birthDate: birthDate,
          email: email,
          phone: phone,
          address: address,
          gender: gender,
        });
        setIsEditing(false);
        console.log("Perfil do usuário atualizado!");
      }
    } catch (error) {
      console.error("Erro ao atualizar perfil do usuário: ", error);
    }
  };

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
    >
      <ScrollView contentContainerStyle={estilos.scrollContainer}>
        <View style={estilos.header}>
          <TouchableOpacity onPress={() => navigation.navigate('TelaPrincipal')} style={estilos.homeButton}>
            <Icon name="home" size={30} color="white" />
          </TouchableOpacity>
          <Image 
            source={profilePic ? { uri: profilePic } : require('../../assets/usuario.png')}
            style={estilos.profilePic}
          />
          <Text style={estilos.userName}>{userName}</Text>
        </View>

        <View style={estilos.infoContainer}>
          <Text style={estilos.label}>Nome Completo</Text>
          <TextInput 
            style={estilos.input} 
            value={userName}
            onChangeText={setUserName}
            editable={isEditing}
          />

          <Text style={estilos.label}>Data de Nascimento</Text>
          <TextInput 
            style={estilos.input} 
            value={birthDate}
            onChangeText={setBirthDate}
            editable={isEditing}
          />

          <Text style={estilos.label}>Email</Text>
          <TextInput 
            style={estilos.input} 
            value={email}
            onChangeText={setEmail}
            editable={isEditing}
          />

          <Text style={estilos.label}>Telefone</Text>
          <TextInput 
            style={estilos.input} 
            value={phone}
            onChangeText={setPhone}
            editable={isEditing}
          />

          <Text style={estilos.label}>Endereço</Text>
          <TextInput 
            style={estilos.input} 
            value={address}
            onChangeText={setAddress}
            editable={isEditing}
          />

          <Text style={estilos.label}>Gênero</Text>
          <TextInput 
            style={estilos.input} 
            value={gender}
            onChangeText={setGender}
            editable={isEditing}
          />

          {isEditing ? (
            <TouchableOpacity 
              style={[estilos.button, estilos.buttonSave]} 
              onPress={handleSaveChanges}
            >
              <Text style={[estilos.buttonText, estilos.buttonTextSave]}>Salvar</Text>
            </TouchableOpacity>
          ) : (
            <TouchableOpacity style={estilos.button} onPress={() => setIsEditing(true)}>
              <Text style={estilos.buttonText}>Editar</Text>
            </TouchableOpacity>
          )}

          <TouchableOpacity style={estilos.button} onPress={handleResetPassword}>
            <Text style={estilos.buttonText}>Redefinir Senha</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
};

const estilos = StyleSheet.create({
  scrollContainer: {
    flexGrow: 1,
    backgroundColor: '#739489',
    padding: 20,
    justifyContent: 'center',
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  homeButton: {
    position: 'absolute',
    top: 0,
    left: 0,
    margin: 10,
  },
  profilePic: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 10,
  },
  userName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
  infoContainer: {
    marginTop: 20,
    width: '100%',
  },
  label: {
    fontSize: 16,
    color: 'white',
    marginBottom: 5,
  },
  input: {
    backgroundColor: '#FFFFFF',
    borderRadius: 10,
    padding: 10,
    marginBottom: 15,
    fontSize: 16,
    color: '#000',
    width: '100%',
  },
  button: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    paddingVertical: 15,
    paddingHorizontal: 25,
    alignItems: 'center',
    width: '100%',
    marginBottom: 15,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.35,
    shadowRadius: 6,
    elevation: 8,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#38a69d',
  },
  buttonSave: {
    backgroundColor: '#38a69d', 
  },
  buttonTextSave: {
    color: '#FFFFFF',
  },
  buttonLogout: {
    marginTop: 20,
    backgroundColor: '#FF6347',
    borderRadius: 20,
    paddingVertical: 15,
    paddingHorizontal: 25,
    alignItems: 'center',
    width: '100%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.35,
    shadowRadius: 6,
    elevation: 8,
  },
  buttonLogoutText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: 'white',
  },
});